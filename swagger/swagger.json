{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "Phlebotomy API",
    "description": "API for managing phlebotomy schedules and teams"
  },
  "basePath": "/api",
  "schemes": [
    "https",
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "tags": [
    {
      "name": "Phlebotomists",
      "description": "APIs for managing phlebotomists"
    },
    {
      "name": "Schedules",
      "description": "APIs for managing phlebotomy schedules"
    },
    {
      "name": "Sites",
      "description": "APIs for managing sites"
    },
    {
      "name": "Teams",
      "description": "APIs for managing teams"
    },
    {
      "name": "Patients",
      "description": "APIs for managing patients"
    },
    {
      "name": "Clients",
      "description": "APIs for managing clients"
    },
    {
      "name": "Panels",
      "description": "APIs for managing panels"
    },
    {
      "name": "Requisitions",
      "description": "APIs for managing requisitions"
    },
    {
      "name": "Dispatch_history",
      "description": "APIs for managing dispatch history"
    },
    {
      "name": "Samples",
      "description": "APIs for managing samples"
    }
  ],
  "definitions": {
    "Phlebotomists": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "description": "The unique ID of the phlebotomist",
          "example": "609da15eec7413470e509a77"
        },
        "status": {
          "type": "string",
          "description": "The status of the phlebotomist",
          "example": "Active"
        },
        "first_name": {
          "type": "string",
          "description": "The first name of the phlebotomist",
          "example": "John"
        },
        "last_name": {
          "type": "string",
          "description": "The last name of the phlebotomist",
          "example": "Doe"
        },
        "team": {
          "type": "string",
          "description": "The ID of the team the phlebotomist is assigned to",
          "example": "6177f2a56b63c7c26140723d"
        },
        "address": {
          "type": "string",
          "description": "The starting address of the phlebotomist",
          "example": "123 Main St, Anytown USA"
        },
        "start_time": {
          "type": "string",
          "description": "The start time of the phlebotomist's shift",
          "format": "date-time",
          "example": "2023-03-19T14:30:00.000Z"
        },
        "email": {
          "type": "string",
          "description": "The email address of the phlebotomist",
          "example": "john.doe@example.com"
        },
        "color": {
          "type": "string",
          "description": "The color assigned to the phlebotomist for display purposes",
          "example": "#FF5733"
        }
      }
      
    },
    "Schedules": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "description": "The unique ID of the schedule",
          "example": "609da15eec7413470e509a84"
        },
        "status": {
          "type": "string",
          "description": "The status of the schedule",
          "example": "Booked"
        },
        "phlebotomist": {
          "type": "string",
          "description": "The ID of the phlebotomist assigned to the schedule",
          "example": "609da15eec7413470e509a77"
        },
        "site": {
          "type": "string",
          "description": "The ID of the site the phlebotomy schedule is for",
          "example": "6437f3decb03f46b75943be0"
        },
        "weekday": {
          "type": "string",
          "description": "The day of the week the phlebotomy schedule is for",
          "example": "Monday"
        }
      }
    },
    "Sites": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the site",
          "example": "ABC Hospital"
        },
        "client_id": {
          "type": "string",
          "description": "The ID of the client that the site belongs to",
          "example": "609da15ddc7413470e509a83"
        },
        "site_type": {
          "type": "string",
          "description": "The type of the site",
          "example": "Hospital"
        },
        "team_id": {
          "type": "string",
          "description": "The ID of the team responsible for the site",
          "example": "609da15ddc7413470e509a84"
        },
        "address": {
          "type": "string",
          "description": "The address of the site",
          "example": "123 Main Street"
        }
      }
    },
    "Teams": {
      "type": "object",
      "properties": {
        "team_id": {
          "type": "string",
          "description": "The ID of the team responsible for the site",
          "example": "609da15ddc7413470e509a84"
        },
        "name": {
          "type": "string",
          "description": "The name of the team",
          "example": "Phlebotomy Team A"
        }
      },
      "TeamInput": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      }    
    },
    "Patients": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "description": "The unique ID of the patient",
          "example": "643807d06d8ef1c1dd458c97"
        },
        "first_name": {
          "type": "string",
          "description": "The first name of the patient",
          "example": "James"
        },
        "last_name": {
          "type": "string",
          "description": "The last name of the patient",
          "example": "Deene"
        },
        "site": {
          "type": "string",
          "description": "The unique ID of the patient's scheduled site",
          "example": "6437f1fbf293dd1f0f9afe3e"
        },
        "address": {
          "type": "string",
          "description": "The address of the patient",
          "example": "123 Main St, Anytown USA"
        },
        "date_of_birth": {
          "type": "string",
          "description": "The patient's date of birth",
          "example": "02/03/1991"
        }
      }
    },
    "Clients": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "description": "The unique ID of the client",
          "example": "609da15ddc7413470e509a83"
        },
        "name": {
          "type": "string",
          "description": "The name of the client",
          "example": "Hospital ABC"
        }
      }
    },
    "Requisitions": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "description": "The unique ID of the client",
          "example": "643811ae57cbe41c0266ce0e"
        },
        "status": {
          "type": "string",
          "description": "The status of the requisition",
          "example": "Received"
        },
        "patient": {
          "type": "string",
          "description": "The unique ID of the patient",
          "example": "643807946d8ef1c1dd458c93"
        },
        "collection_date": {
          "type": "date",
          "description": "The date of collection of the sample",
          "example": "03/10/2023"
        },
        "received_date": {
          "type": "date",
          "description": "The date the requisition was received",
          "example": "03/08/2023"
        },
        "provider": {
          "type": "string",
          "description": "The details of the provider",
          "example": "Provider001"
        },
        "site": {
          "type": "string",
          "description": "The unique ID of the requisition site",
          "example": "6437f21af293dd1f0f9afe41"
        },
        "comment": {
          "type": "string",
          "description": "The comment pertaining to the requisition",
          "example": "This is urgent"
        },
        "phlebotomist_comment": {
          "type": "string",
          "description": "The phlebotomist's comment pertaining to the requisition",
          "example": "This is urgent"
        },
        "panel": {
          "type": "string",
          "description": "The unique ID of the panel for the requisition",
          "example": "771da15ddc7413470e509a33"
        }
      }
    },
    "Samples": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "description": "The unique ID of the sample",
          "example": "610da15aab7413470e509b88"
        },
        "name": {
          "type": "string",
          "description": "The name of the sample",
          "example": "Sample A1"
        },
        "status": {
          "type": "string",
          "description": "The status of the sample",
          "example": "normal without findings"
        },
        "requisition": {
          "type": "string",
          "description": "The unique ID of the sample requisition",
          "example": "710da15aab7413470e509a923"
        },
        "collection_date": {
          "type": "date",
          "description": "The date of collection of the sample",
          "example": "03/10/2023"
        },
        "type": {
          "type": "string",
          "description": "The specific type of the sample",
          "example": "repeat"
        },
        "method": {
          "type": "string",
          "description": "The method used to collect the sample",
          "example": "Method A"
        },
        "container_type": {
          "type": "string",
          "description": "The type of container used for the collected sample",
          "example": "Container B"
        }
      }
    },
    "Dispatch_history": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "description": "The unique ID of the requisition",
          "example": "610da15aab7413470e509a92"
        },
        "date": {
          "type": "date",
          "description": "The date of dispatch",
          "example": "03/25/2023"
        },
        "phlebotomist": {
          "type": "string",
          "description": "The ID of the phlebotomist in charge of dispatch",
          "example": "609da15eec7413470e509a77"
        },
        "requisition": {
          "type": "string",
          "description": "The unique ID of the dispatched requisition",
          "example": "643811a857cbe41c0266ce0c"
        },
        "attempt_made": {
          "type": "boolean",
          "description": "The details of attempt",
          "example": "true"
        }  
      }
    },
    "Panels": {
      "type": "object",
      "properties": {
        "panel_id": {
          "type": "string",
          "description": "The unique ID of the panel",
          "example": "610da15ddc7413470e509a33"
        },
        "name": {
          "type": "string",
          "description": "The name of the panel",
          "example": "Panel A"
        }
      }
    }    
  },
  "paths": {
    "/phlebotomists": {
      "get": {
        "tags": [
          "Phlebotomists"
         ],
        "summary": "Get all phlebotomists",
        "description": "Returns a list of all phlebotomists in the database",
        "responses": {
          "200": {
            "description": "An array of phlebotomists",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Phlebotomists"
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "tags": [
          "Phlebotomists"
        ],
        "summary": "Create a new phlebotomist",
        "description": "Creates a new phlebotomist in the database",
        "parameters": [
          {
            "name": "Phlebotomists",
            "in": "body",
            "description": "Phlebotomists object to be added to the database",
            "schema": {
              "$ref": "#/definitions/Phlebotomists"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Phlebotomists created successfully",
            "schema": {
              "$ref": "#/definitions/Phlebotomists"
            }
          },
          "400": {
            "description": "Bad request, phlebotomist object not provided"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/phlebotomists/{id}": {
      "get": {
        "tags": [
          "Phlebotomists"
        ],
        "summary": "Get a phlebotomist by ID",
        "description": "Returns a phlebotomist with the specified ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the phlebotomist to retrieve",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Phlebotomists object",
            "schema": {
              "$ref": "#/definitions/Phlebotomists"
            }
          },
          "404": {
            "description": "Phlebotomists not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "tags": [
          "Phlebotomists"
        ],
        "summary": "Update phlebotomist by ID",
        "description": "Updates phlebotomist in the database by ID",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "default": "6432549b0d9d34ae72c7b84f",
            "description": "ID of the phlebotomist to retrieve",
            "required": true,
            "type": "string"
          },
          {
            "name": "Phlebotomists",
            "in": "body",
            "description": "Phlebotomists object to be updated to the database",
            "schema": {
              "$ref": "#/definitions/Phlebotomists"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Phlebotomists created successfully",
            "schema": {
              "$ref": "#/definitions/Phlebotomists"
            }
          },
          "400": {
            "description": "Bad request, phlebotomist object not provided"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": [
          "Phlebotomists"
        ],
        "summary": "Delete phlebotomist by ID",
        "description": "Delete phlebotomist in the database by ID",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "default": "609da15eec7413470e509a77",
            "description": "ID of the phlebotomist to retrieve",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Phlebotomists deleted successfully",
            "schema": {
              "$ref": "#/definitions/Phlebotomists"
            }
          },
          "400": {
            "description": "Bad request, phlebotomist object not provided"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/schedules": {
      "get": {
        "summary": "Get all Phlebotomist Schedules",
        "description": "Retrieve a list of all Phlebotomist Schedules",
        "tags": [
          "Schedules"
        ],
        "responses": {
          "200": {
            "description": "Successful response with a list of all Phlebotomist Schedules",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Schedules"
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "summary": "Create a Phlebotomist Schedule",
        "description": "Create a new Phlebotomists Schedule",
        "tags": [
          "Schedules"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "body",
            "description": "Phlebotomist Schedule object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Schedules"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful response with the created Phlebotomist Schedule object",
            "schema": {
              "$ref": "#/definitions/Schedules"
            }
          },
          "400": {
            "description": "Bad Request. Invalid input parameters"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/schedules/{id}": {
      "get": {
        "summary": "Get a Phlebotomist Schedule by ID",
        "description": "Retrieve a Phlebotomists Schedule by its ID",
        "tags": [
          "Schedules"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "A Phlebotomist Schedule ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with the requested Phlebotomist Schedule object",
            "schema": {
              "$ref": "#/definitions/Schedules"
            }
          },
          "404": {
            "description": "Not Found. Phlebotomist Schedule with given ID not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
          "summary": "Update a phlebotomist schedule by ID",
          "description": "Updates a phlebotomy schedule using the provided ID",
          "tags": [
            "Schedules"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "ID of the phlebotomist schedule to update",
              "required": true,
              "type": "string"
            },
            {
            "name": "id",
              "in": "body",
              "schema": {
              "$ref": "#/definitions/Schedules"
              },
              "description": "Dettails of the phlebotomist schedule to update",
              "required": true,
              "type": "string"         
            }  
          ],
          "responses": {
            "200": {
              "description": "Phlebotomist schedule updated successfully"
            },
            "404": {
              "description": "Phlebotomist schedule not found"
            },
            "500": {
              "description": "Internal server error"
            }
          }
        },
      "delete": {
          "summary": "Delete a phlebotomy schedule by ID",
          "description": "Deletes a phlebotomy schedule using the provided ID",
          "tags": [
            "Schedules"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "ID of the phlebotomy schedule to delete",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Phlebotomy schedule deleted successfully"
            },
            "404": {
              "description": "Phlebotomy schedule not found"
            },
            "500": {
              "description": "Internal server error"
            }
          }
        }
    },
    "/teams": {
            "get": {
            "summary": "Get a list of all teams",
            "tags": [
              "Teams"
            ],
            "responses": {
              "200": {
                "description": "Successful operation",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/TeamOutput"
                  }
                }
              },
              "500": {
                "description": "Internal server error"
              }
            }
          },
          "post": {
            "tags": [
              "Teams"
            ],
            "summary": "Create a new team",
            "parameters": [
              {
                "name": "body",
                "in": "body",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/Teams"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Team created successfully"
              },
              "400": {
                "description": "Invalid input"
              },
              "500": {
                "description": "Internal server error"
              }
            }
          }
    },
    "/teams/{id}": {
          "get": {
            "summary": "Get a team by ID",
            "tags": [
              "Teams"
            ],
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Successful operation",
                "schema": {
                  "$ref": "#/definitions/Teams"
                }
              },
              "404": {
                "description": "Team not found"
              },
              "500": {
                "description": "Internal server error"
              }
            }
          },
          "put": {
            "summary": "Update a team by ID",
            "tags": [
              "Teams"
            ],
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "required": true,
                "type": "string"
              },
              {
                "name": "teams",
                "in": "body",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/Teams"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Team updated successfully"
              },
              "400": {
                "description": "Invalid input"
              },
              "404": {
                "description": "Team not found"
              },
              "500": {
                "description": "Internal server error"
              }
            }
          },
          "delete": {
            "summary": "Delete a team by ID",
            "tags": [
              "Teams"
            ],
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "Team deleted successfully"
              },
              "404": {
                "description": "Team not found"
              },
              "500": {
                "description": "Internal server error"
              }
            }
          }
    },
    "/sites": {
      "get": {
        "summary": "Retrieve a list of all sites",
        "tags": [
          "Sites"
        ],
        "responses": {
          "200": {
            "description": "A list of all sites",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Sites"
              }
            }
          },
          "404": {
            "description": "No sites found"
          }
        }
      },
      "post": {
        "summary": "Create a new site",
        "tags": [
          "Sites"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "id",
            "description": "Site object to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Sites"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The created site object",
            "schema": {
              "$ref": "#/definitions/Sites"
            }
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/sites/{id}": {
      "get": {
        "summary": "Retrieve a site by ID",
        "tags": [
          "Sites"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the site to retrieve",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The site object",
            "schema": {
              "$ref": "#/definitions/Sites"
            }
          },
          "404": {
            "description": "Site not found"
          }
        }
      },
      "put": {
        "summary": "Update a site by ID",
        "tags": [
          "Sites"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the site to update",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "id",
            "description": "Site object to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Sites"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated site object",
            "schema": {
              "$ref": "#/definitions/Sites"
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Site not found"
          }
        }
      },
      "delete": {
        "summary": "Delete a site by ID",
        "tags": [
          "Sites"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the site to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Site deleted"
          },
          "404": {
            "description": "Site not found"
          }
        }
      }
    },
    "/clients": {
      "get": {
        "summary": "Get all clients",
        "tags": [
          "Clients"
        ],
        "description": "Returns a list of all clients",
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Clients"
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "Create a new client",
        "tags": [
          "Clients"
        ],
        "description": "Creates a new client",
        "parameters": [
          {
            "name": "Client",
            "in": "body",
            "description": "Client object to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Clients"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Client created successfully",
            "schema": {
              "$ref": "#/definitions/Clients"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/clients/{id}": {
      "get": {
        "summary": "Get client by ID",
        "tags": [
          "Clients"
        ],
        "description": "Returns a client object by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the client to retrieve",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The retrieved client object",
            "schema": {
              "$ref": "#/definitions/Clients"
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Client not found"
          }
        }
      },
      "put": {
        "summary": "Update client by ID",
        "tags": [
          "Clients"
        ],
        "description": "Updates a client object by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the client to update",
            "required": true,
            "type": "string"
          },
          {
            "name": "client",
            "in": "body",
            "description": "The updated client object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Clients"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Client updated successfully",
            "schema": {
              "$ref": "#/definitions/Clients"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Client not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "summary": "Delete client by ID",
        "tags": [
          "Clients"
        ],
        "description": "Deletes a client object by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the client to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Client deleted"
          },
          "404": {
            "description": "Client not found"
          }
        }
      }
    },
    "/patients": {
      "get": {
        "tags": [
          "Patients"
        ],
        "summary": "List all patients",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Patients"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Patients"
        ],
        "summary": "Create a new patient",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Patient object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Patients"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Patients"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/patients/{id}": {
      "get": {
        "tags": [
          "Patients"
        ],
        "summary": "Get a patient by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the patient to get",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Patients"
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "tags": [
          "Patients"
        ],
        "summary": "Update a patient",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the patient to update",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Patient object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Patients"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Patients"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }  
        }
      },
      "delete": {
        "tags": [
          "Patients"
          ],
        "summary": "Deletes a patient",
        "description": "Deletes a patient based on the specified client ID",
        "parameters": [ 
          {
            "name": "id",
            "in": "path",
            "description": "ID of the patient to update",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
              "description": "Patient deleted successfully"
            },
         "404": {
              "description": "Patient not found"
            },
          "500": {
              "description": "Internal server error"
            }
          }
        }
    },  
    "/requisitions": {
        "get": {
          "tags": [
            "Requisitions"
          ],
          "summary": "Get all requisitions",
          "responses": {
            "200": {
              "description": "Return a list of all requisitions",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Requisitions"
                }
              }
            },
            "500": {
              "description": "Internal server error"
            }
          }
        },
        "post": {
          "tags": [
            "Requisitions"
          ],
          "summary": "Create a new requisition",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "body",
              "description": "Requisition object to be created",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Requisitions"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "Requisition created successfully",
              "schema": {
                "$ref": "#/definitions/Requisitions"
              }
            },
            "400": {
              "description": "Invalid request"
            },
            "500": {
              "description": "Internal server error"
            }
          }
        }
    },
    "/requisitions/{id}": {
        "get": {
          "tags": [
            "Requisitions"
          ],
          "summary": "Get a requisition by ID",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "ID of the requisition to be retrieved",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Returns the requisition with the specified ID",
              "schema": {
                "$ref": "#/definitions/Requisitions"
              }
            },
            "404": {
              "description": "Requisition not found"
            },
            "500": {
              "description": "Internal server error"
            }
          }
        },
        "put": {
          "tags": [
            "Requisitions"
          ],
          "summary": "Update an existing requisition",
          "description": "Updates an existing requisition with the provided ID.",
          "operationId": "updateRequisition",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Requisition object to update",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Requisitions"
              }
            },
            {
              "name": "body",
              "in": "body",
              "description": "Requisition object to update",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Requisitions"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful update",
              "schema": {
                "$ref": "#/definitions/Requisitions"
              }
            },
            "400": {
              "description": "Bad Request"
            },
            "404": {
              "description": "Requisition not found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          }
        },
        "delete": {
          "tags": [
            "Requisitions"
          ],
          "summary": "Delete an existing requisition",
          "description": "Deletes an existing requisition with the provided ID.",
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "description": "Requisition object to delete",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Requisitions"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Successful deletion"
            },
            "404": {
              "description": "Requisition not found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          }
        },
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the requisition"
          },
          "status": {
            "type": "string",
            "description": "Status of the requisition"
          },
          "patient_id": {
            "type": "string",
            "description": "ID of the patient associated with the requisition"
          },
          "collection_date": {
            "type": "string",
            "description": "Date when the sample was collected"
          },
          "received_date": {
            "type": "string",
            "description": "Date when the sample was received by the lab"
          }
        }
    },
    "/panels": {
      "get": {
        "tags": [
          "Panels"
        ],
        "summary": "Get all panels",
        "description": "Returns a list of all panels",
        "responses": {
          "200": {
            "description": "A list of panels",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Panels"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Panels"
        ],
        "summary": "Create a panel",
        "description": "Creates a new panel",
        "parameters": [
          {
            "name": "panel",
            "in": "body",
            "description": "Panel object",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Panels"
              }
             }
          }
        ],
        "responses": {
          "200": {
            "description": "The created panel",
            "schema": {
              "items": {
              "$ref": "#/definitions/Panels"
            }
          }
          }
        }
      }
    },
    "/panels/{id}": {
      "get": {
        "tags": [
          "Panels"
        ],
        "summary": "Get a panel by ID",
        "description": "Returns a panel with the specified ID",
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "description": "ID of the retrieved panel",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested panel",
            "schema": {
              "type": "array",
              "items": {
              "$ref": "#/definitions/Panels"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Panels"
        ],
        "summary": "Update a panel",
        "description": "Updates an existing panel with the specified ID",
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "description": "ID of the panel",
            "required": true,
            "type": "string"
          },
          {
            "name": "panel",
            "in": "body",
            "description": "Panel object",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
              "$ref": "#/definitions/Panels"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated panel",
            "schema": {
              "$ref": "#/definitions/Panels"
            }
          }
        }
      },
    "delete": {
      "tags": [
        "Panels"
      ],
      "summary": "Delete panel by ID",
      "description": "Delete a panel by ID",
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "ID of panel to delete",
          "required": true,
          "type": "string"
        }
      ],
      "responses": {
        "204": {
          "description": "Panel deleted successfully"
        },
        "404": {
          "description": "Panel not found"
        }
      }
    }  
    },
    "/samples": {
      "get": {
        "tags": [
          "Samples"
          ],
        "summary": "Get a list of all samples",
        "description": "Returns a list of all samples",
        "responses": [
        {
          "200": {
          "description": "A list of samples",
          "Schema": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Samples"
            }
           }
         },
         "500": {
          "description": "Internal server error"
         }
        }
       ]
       },
       "post": {
          "tags": [
           "Samples"
            ],
          "summary": "Create a new sample",
          "description": "Create a new sample",
          "parameters": [
            {
            "in": "body",
            "name": "id",
            "required": true,
            "schema": {
              "items": {
                "$ref": "#/definitions/Samples" 
               }
              }
            }
          ],
         "responses": [
          {
          "201": {
             "description": "Sample created successfully",
             "Schema": {
              "items": {
                "$ref": "#/definitions/Samples"
                }
             }
            },
          "400": {
            "description": "Invalid input data"
                }
          }
          ]
        }
    },
    "/samples/{id}": {
      "get": {
        "tags": [
          "Samples"
        ],
        "summary": "Get sample by ID",
        "description": "Get sample by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of sample to get",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Sample retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/Samples"
                }
              }
            }
          },
          "404": {
            "description": "Sample not found"
          }
        }
      },
      "put": {
        "tags": [
          "Samples"
        ],
        "summary": "Update sample by ID",
        "description": "Update sample for the given ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of sample to update",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "body",
            "description": "ID of sample to update",
            "required": true,
            "type": "string",
            "schema": {
              "$ref": "#/definitions/Samples"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sample updated successfully",
            "type": "string",
                "schema": {
                  "$ref": "#/definitions/Samples"
                }
            },
          "400": {
            "description": "Invalid input data"
          },
          "404": {
            "description": "Sample not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Samples"
        ],
        "summary": "Deletes a Sample",
        "description": "Delete a Sample by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of Sample to delete",
            "required": true,
            "type": "string",
            "schema": {
              "type": "array",
              "$ref": "#/definitions/Samples"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Sample successfully deleted"
          },
          "404": {
            "description": "Sample not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/dispatchHistories": {
      "get": {
        "tags": [
          "Dispatch_history"
         ],
        "summary": "Get all Dispatch History entries",
        "description": "Returns a list of all dispatch records in the database",
        "responses": {
          "200": {
            "description": "An array of Dispatch records",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Dispatch_history"
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "tags": [
          "Dispatch_history"
        ],
        "summary": "Create a new Dispatch History",
        "description": "Create a new record for Dispatch",
        "parameters": [
          {
            "in": "body",
            "name": "id",
            "description": "Dispatch History object",
            "required": true,
            "schema": {
             "$ref": "#/definitions/Dispatch_history"
          }
          }
        ],
        "responses": {
          "201": {
            "description": "Dispatch History created",
            "schema": {
              "$ref": "#/definitions/Dispatch_history"
            }
          },
          "400": {
            "description": "Invalid input data"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/dispatchHistories/{id}": {
      "get": {
        "tags": [
          "Dispatch_history"
        ],
        "summary": "Retrieve a Dispatch History by ID",
        "description": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of Dispatch History to retrieve",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Dispatch History found",
            "schema": {
              "$ref": "#/definitions/Dispatch_history"
            }
          },
          "404": {
            "description": "Dispatch History not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "put": {
        "tags": [
          "Dispatch_history"
        ],
        "summary": "Update history by ID",
        "description": "Update history for the given ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of history to update",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "body",
            "description": "ID of history to update",
            "required": true,
            "type": "string",
            "schema": {
              "$ref": "#/definitions/Dispatch_history"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Dispatch History updated successfully",
            "type": "string",
                "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Dispatch_history"
                }
                }
            },
          "400": {
            "description": "Invalid input data"
          },
          "404": {
            "description": "Dispatch history not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Dispatch_history"
        ],
        "summary": "Delete a Dispatch History by ID",
        "description": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of Dispatch History to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Dispatch history successfully deleted"
          },
          "404": {
            "description": "Dispatch history not found"
          },
          "500": {
            "description": "Dispatch history error"
          }
        }
      }
    }
  }
}

  

 




  
