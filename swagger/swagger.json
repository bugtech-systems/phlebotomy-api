{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "Phlebotomy API",
    "description": "API for managing phlebotomy schedules and teams"
  },
  "basePath": "/api",
  "schemes": [
    "https",
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "tags": [
    {
      "name": "Phlebotomist",
      "description": "Operations related to phlebotomists"
    },
    {
      "name": "Phlebotomy_schedule",
      "description": "Operations related to phlebotomy schedules"
    },
    {
      "name": "Team",
      "description": "Operations related to teams"
    },
    {
      "name": "Site",
      "description": "Operations related to sites"
    },
    {
      "name": "Client",
      "description": "Operations related to clients"
    },
    {
      "name": "Patient",
      "description": "Operations related to patients"
    },
    {
      "name": "Requisition",
      "description": "Operations related to requisitions"
    },
    {
      "name": "Panel",
      "description": "Operations related to panels"
    },
    {
      "name": "Sample",
      "description": "Operations related to Samples"
    },
    {
      "name": "Panel",
      "description": "Operations related to panels"
    },
    {
      "name": "Dispatch History",
      "description": "Operations related to dispatch history"
    }
  ],
  "definitions": {
    "Phlebotomist": {
      "type": "object",
      "properties": {
        "phlebotomis_id": {
          "type": "string",
          "description": "The unique ID of the phlebotomist",
          "example": "609da15eec7413470e509a77"
        },
        "status": {
          "type": "string",
          "description": "The status of the phlebotomist",
          "example": "Active"
        },
        "first_name": {
          "type": "string",
          "description": "The first name of the phlebotomist",
          "example": "John"
        },
        "last_name": {
          "type": "string",
          "description": "The last name of the phlebotomist",
          "example": "Doe"
        },
        "team_id": {
          "type": "string",
          "description": "The ID of the team the phlebotomist is assigned to",
          "example": "6177f2a56b63c7c26140723d"
        },
        "address": {
          "type": "string",
          "description": "The starting address of the phlebotomist",
          "example": "123 Main St, Anytown USA"
        },
        "starting_time": {
          "type": "string",
          "description": "The start time of the phlebotomist's shift",
          "format": "date-time",
          "example": "2023-03-19T14:30:00.000Z"
        },
        "email": {
          "type": "string",
          "description": "The email address of the phlebotomist",
          "example": "john.doe@example.com"
        },
        "color": {
          "type": "string",
          "description": "The color assigned to the phlebotomist for display purposes",
          "example": "#FF5733"
        }
      }
    },
    "Schedule": {
      "type": "object",
      "properties": {
        "schedule_id": {
          "type": "string",
          "description": "The unique ID of the schedule",
          "example": "609da15eec7413470e509a84"
        },
        "status": {
          "type": "string",
          "description": "The status of the schedule",
          "example": "Booked"
        },
        "phlebotomist_id": {
          "type": "string",
          "description": "The ID of the phlebotomist assigned to the schedule",
          "example": "6177f2a56b63c7c26140723d"
        },
        "site_id": {
          "type": "string",
          "description": "The ID of the site the phlebotomy schedule is for",
          "example": "6177f2a56b63c7c26140723d"
        },
        "weekday": {
          "type": "string",
          "description": "The day of the week the phlebotomy schedule is for",
          "example": "Monday"
        }
      }
    },
    "Site": {
      "type": "object",
      "properties": {
        "site_id": {
          "type": "string",
          "description": "The unique ID of the site",
          "example": "SITE001"
        },
        "name": {
          "type": "string",
          "description": "The name of the site",
          "$ref": "#/definitions/Site",
          "example": "ABC Hospital"
        },
        "client_id": {
          "type": "string",
          "description": "The ID of the client that the site belongs to",
          "example": "609da15ddc7413470e509a83"
        },
        "site_type": {
          "type": "string",
          "description": "The type of the site",
          "example": "Hospital"
        },
        "team_id": {
          "type": "string",
          "description": "The ID of the team responsible for the site",
          "example": "609da15ddc7413470e509a84"
        },
        "address": {
          "type": "string",
          "description": "The address of the site",
          "example": "123 Main Street"
        }
      }
    },
    "Team": {
      "type": "object",
      "properties": {
        "team_id": {
          "type": "string",
          "description": "The ID of the team responsible for the site",
          "example": "609da15ddc7413470e509a84"
        },
        "name": {
          "type": "string",
          "description": "The name of the team",
          "example": "Phlebotomy Team A"
        }
      },
      "TeamInput": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      }    
    },
    "Patient": {
      "type": "object",
      "properties": {
        "patient_id": {
          "type": "string",
          "description": "The unique ID of the patient",
          "example": "PATIENT0123",
          "$ref": "#/definitions/Patient"
        },
        "first_name": {
          "type": "string",
          "description": "The first name of the patient",
          "example": "James"
        },
        "last_name": {
          "type": "string",
          "description": "The last name of the patient",
          "example": "Deene"
        },
        "site_id": {
          "type": "string",
          "description": "The unique ID of the patient's scheduled site",
          "example": "SITE001"
        },
        "address": {
          "type": "string",
          "description": "The address of the patient",
          "example": "123 Main St, Anytown USA"
        },
        "date_of_birth": {
          "type": "string",
          "description": "The patient's date of birth",
          "example": "02/03/1991"
        }
      }
    },
    "Client": {
      "type": "object",
      "properties": {
        "client_id": {
          "type": "string",
          "description": "The unique ID of the client",
          "example": "CLIENT123"
        },
        "name": {
          "type": "string",
          "description": "The name of the client",
          "example": "ABC Healthcare"
        }
      }
    },
    "Requisition": {
      "type": "object",
      "properties": {
        "requisition_id": {
          "type": "string",
          "description": "The unique ID of the requisition",
          "example": "610da15aab7413470e509a92"
        },
        "status": {
          "type": "string",
          "description": "The status of the requisition",
          "example": "Processed"
        },
        "patient_id": {
          "type": "string",
          "description": "The unique ID of the patient",
          "example": "PATIENT0123"
        },
        "collection_date": {
          "type": "date-time",
          "description": "The date of collection of the sample",
          "example": "03/10/2023"
        },
        "received_date": {
          "type": "date-time",
          "description": "The date the requisition was received",
          "example": "03/08/2023"
        },
        "provider": {
          "type": "date-time",
          "description": "The details of the provider",
          "example": "03/08/2023"
        },
        "site_id": {
          "type": "string",
          "description": "The unique ID of the requisition site",
          "example": "SITE001"
        },
        "comment": {
          "type": "string",
          "description": "The comment pertaining to the requisition",
          "example": "This is urgent"
        },
        "phlebotomist_comment": {
          "type": "string",
          "description": "The phlebotomist's comment pertaining to the requisition",
          "example": "This is urgent"
        },
        "panel_id": {
          "type": "string",
          "description": "The unique ID of the panel for the requisition",
          "example": "771da15ddc7413470e509a33"
        }
      }
    },
    "Sample": {
      "type": "object",
      "properties": {
        "sample_id": {
          "type": "string",
          "description": "The unique ID of the sample",
          "example": "610da15aab7413470e509b88"
        },
        "name": {
          "type": "string",
          "description": "The name of the sample",
          "example": "Sample A1"
        },
        "status": {
          "type": "string",
          "description": "The status of the sample",
          "example": "normal without findings"
        },
        "requisition_id": {
          "type": "string",
          "description": "The unique ID of the sample requisition",
          "example": "710da15aab7413470e509a923"
        },
        "collection_date": {
          "type": "date-time",
          "description": "The date of collection of the sample",
          "example": "03/10/2023"
        },
        "type": {
          "type": "string",
          "description": "The specific type of the sample",
          "example": "repeat"
        },
        "method": {
          "type": "string",
          "description": "The method used to collect the sample",
          "example": "Method A"
        },
        "container_type": {
          "type": "string",
          "description": "The type of container used for the collected sample",
          "example": "Container B"
        }
      }
    },
    "Dispatch History": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique ID of the requisition",
          "example": "610da15aab7413470e509a92"
        },
        "date": {
          "type": "date-time",
          "description": "The date of dispatch",
          "example": "03/25/2023"
        },
        "phlebotomist_id": {
          "type": "string",
          "description": "The ID of the phlebotomist in charge of dispatch",
          "example": "6177f2a56b63c7c26140723d"
        },
        "requisition_id": {
          "type": "string",
          "description": "The unique ID of the dispatched requisition",
          "example": "610da15aab7413470e509a92"
        },
        "attempt_made": {
          "type": "string",
          "description": "The details of attempt",
          "example": "attempt1"
        }  
      }
    },
    "Panel": {
      "type": "object",
      "properties": {
        "panel_id": {
          "type": "string",
          "description": "The unique ID of the panel",
          "example": "610da15ddc7413470e509a33"
        },
        "name": {
          "type": "string",
          "description": "The name of the panel",
          "example": "Panel A"
        }
      }
    }    
  },
  "paths": {
    "/phlebotomists": {
      "get": {
        "tags": [
          "Phlebotomist"
        ],
        "summary": "Get all phlebotomists",
        "description": "Returns a list of all phlebotomists in the database",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "An array of phlebotomists",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Phlebotomist"
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "tags": [
          "Phlebotomist"
        ],
        "summary": "Create a new phlebotomist",
        "description": "Creates a new phlebotomist in the database",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Phlebotomist",
            "in": "body",
            "description": "Phlebotomist object to be added to the database",
            "schema": {
              "$ref": "#/definitions/Phlebotomist"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Phlebotomist created successfully",
            "schema": {
              "$ref": "#/definitions/Phlebotomist"
            }
          },
          "400": {
            "description": "Bad request, phlebotomist object not provided"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/phlebotomists/{id}": {
      "get": {
        "tags": [
          "Phlebotomist"
        ],
        "summary": "Get a phlebotomist by ID",
        "description": "Returns a phlebotomist with the specified ID",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "default": "6432549b0d9d34ae72c7b84f",
            "description": "ID of the phlebotomist to retrieve",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Phlebotomist object",
            "schema": {
              "$ref": "#/definitions/Phlebotomist"
            }
          },
          "404": {
            "description": "Phlebotomist not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "tags": [
          "Phlebotomist"
        ],
        "summary": "Update phlebotomist by ID",
        "description": "Updates phlebotomist in the database by ID",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "default": "6432549b0d9d34ae72c7b84f",
            "description": "ID of the phlebotomist to retrieve",
            "required": true,
            "type": "string"
          },
          {
            "name": "Phlebotomist",
            "in": "body",
            "description": "Phlebotomist object to be updated to the database",
            "schema": {
              "$ref": "#/definitions/Phlebotomist"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Phlebotomist created successfully",
            "schema": {
              "$ref": "#/definitions/Phlebotomist"
            }
          },
          "400": {
            "description": "Bad request, phlebotomist object not provided"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": [
          "Phlebotomist"
        ],
        "summary": "Delete phlebotomist by ID",
        "description": "Delete phlebotomist in the database by ID",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "default": "6432549b0d9d34ae72c7b84f",
            "description": "ID of the phlebotomist to retrieve",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Phlebotomist deleted successfully",
            "schema": {
              "$ref": "#/definitions/Phlebotomist"
            }
          },
          "400": {
            "description": "Bad request, phlebotomist object not provided"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/phlebotomist-schedules": {
      "get": {
        "summary": "Get all Phlebotomist Schedules",
        "description": "Retrieve a list of all Phlebotomist Schedules",
        "tags": [
          "Phlebotomy_schedule"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful response with a list of Phlebotomist Schedules",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PhlebotomySchedule"
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "summary": "Create a Phlebotomist Schedule",
        "description": "Create a new Phlebotomist Schedule",
        "tags": [
          "Phlebotomy_schedule"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "PhlebotomistSchedule",
            "in": "body",
            "description": "Phlebotomist Schedule object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PhlebotomySchedule"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful response with the created Phlebotomist Schedule object",
            "schema": {
              "$ref": "#/definitions/PhlebotomySchedule"
            }
          },
          "400": {
            "description": "Bad Request. Invalid input parameters"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/phlebotomist-schedules/{id}": {
      "get": {
        "summary": "Get a Phlebotomist Schedule by ID",
        "description": "Retrieve a Phlebotomist Schedule by its ID",
        "tags": [
          "Phlebotomy_schedule"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Phlebotomist Schedule ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with the requested Phlebotomist Schedule object",
            "schema": {
              "$ref": "#/definitions/PhlebotomistSchedule"
            }
          },
          "404": {
            "description": "Not Found. Phlebotomist Schedule with given ID not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
          "summary": "Update a phlebotomy schedule by ID",
          "description": "Updates a phlebotomy schedule using the provided ID",
          "tags": [
            "Phlebotomy_schedule"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "ID of the phlebotomy schedule to update",
              "required": true,
              "type": "string"
            },
            {
              "name": "PhlebotomistSchedule",
              "in": "body",
              "description": "Phlebotomist object to be updated to the database",
              "schema": {
                "$ref": "#/definitions/PhlebotomySchedule"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Phlebotomy schedule updated successfully"
            },
            "404": {
              "description": "Phlebotomy schedule not found"
            },
            "500": {
              "description": "Internal server error"
            }
          }
        },
      "delete": {
          "summary": "Delete a phlebotomy schedule by ID",
          "description": "Deletes a phlebotomy schedule using the provided ID",
          "tags": [
            "Phlebotomy_schedule"
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "ID of the phlebotomy schedule to delete",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Phlebotomy schedule deleted successfully"
            },
            "404": {
              "description": "Phlebotomy schedule not found"
            },
            "500": {
              "description": "Internal server error"
            }
          }
        }
    },
    "/teams": {
            "get": {
            "summary": "Get a list of all teams",
            "tags": [
              "Team"
            ],
            "responses": {
              "200": {
                "description": "Successful operation",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/TeamOutput"
                  }
                }
              },
              "500": {
                "description": "Internal server error"
              }
            }
          },
          "post": {
            "tags": [
              "Team"
            ],
            "summary": "Create a new team",
            "parameters": [
              {
                "name": "body",
                "in": "body",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/TeamInput"
                }
              }
            ],
            "responses": {
              "201": {
                "description": "Team created successfully"
              },
              "400": {
                "description": "Invalid input"
              },
              "500": {
                "description": "Internal server error"
              }
            }
          }
    },
      "/teams/{id}": {
          "get": {
            "summary": "Get a team by ID",
            "tags": [
              "Team"
            ],
            "parameters": [
              {
                "name": "teamId",
                "in": "path",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "Successful operation",
                "schema": {
                  "$ref": "#/definitions/TeamOutput"
                }
              },
              "404": {
                "description": "Team not found"
              },
              "500": {
                "description": "Internal server error"
              }
            }
          },
          "put": {
            "summary": "Update a team by ID",
            "tags": [
              "Team"
            ],
            "parameters": [
              {
                "name": "teamId",
                "in": "path",
                "required": true,
                "type": "string"
              },
              {
                "name": "body",
                "in": "body",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/TeamInput"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Team updated successfully"
              },
              "400": {
                "description": "Invalid input"
              },
              "404": {
                "description": "Team not found"
              },
              "500": {
                "description": "Internal server error"
              }
            }
          },
          "delete": {
            "summary": "Delete a team by ID",
            "tags": [
              "Team"
            ],
            "parameters": [
              {
                "name": "teamId",
                "in": "path",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "204": {
                "description": "Team deleted successfully"
              },
              "404": {
                "description": "Team not found"
              },
              "500": {
                "description": "Internal server error"
              }
            }
          }
    },
    "/sites": {
      "get": {
        "summary": "Retrieve a list of all sites",
        "tags": [
          "Site"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of all sites",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Site"
              }
            }
          },
          "404": {
            "description": "No sites found"
          }
        }
      },
      "post": {
        "summary": "Create a new site",
        "tags": [
          "Site"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "site",
            "description": "Site object to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SiteInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The created site object",
            "schema": {
              "$ref": "#/definitions/Site"
            }
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/sites/{id}": {
      "get": {
        "summary": "Retrieve a site by ID",
        "tags": [
          "Site"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "siteId",
            "description": "ID of the site to retrieve",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The site object",
            "schema": {
              "$ref": "#/definitions/Site"
            }
          },
          "404": {
            "description": "Site not found"
          }
        }
      },
      "put": {
        "summary": "Update a site by ID",
        "tags": [
          "Site"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "siteId",
            "description": "ID of the site to update",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "site",
            "description": "Site object to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SiteInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated site object",
            "schema": {
              "$ref": "#/definitions/Site"
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Site not found"
          }
        }
      },
      "delete": {
        "summary": "Delete a site by ID",
        "tags": [
          "Site"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "siteId",
            "description": "ID of the site to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Site deleted"
          },
          "404": {
            "description": "Site not found"
          }
        }
      }
    },
    "/clients": {
      "get": {
        "summary": "Get all clients",
        "tags": [
          "Client"
        ],
        "description": "Returns a list of all clients",
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Client"
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "Create a new client",
        "tags": [
          "Client"
        ],
        "description": "Creates a new client",
        "parameters": [
          {
            "name": "client",
            "in": "body",
            "description": "Client object to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClientInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Client created successfully",
            "schema": {
              "$ref": "#/definitions/Client"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/clients/{id}": {
      "get": {
        "summary": "Get client by ID",
        "tags": [
          "Client"
        ],
        "description": "Returns a client object by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the client to retrieve",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/Client"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Client not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "summary": "Update client by ID",
        "tags": [
          "Client"
        ],
        "description": "Updates a client object by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the client to update",
            "required": true,
            "type": "string"
          },
          {
            "name": "client",
            "in": "body",
            "description": "Updated client object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClientInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Client updated successfully",
            "schema": {
              "$ref": "#/definitions/Client"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Client not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "summary": "Delete client by ID",
        "tags": [
          "Client"
        ],
        "description": "Deletes a client object by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the client to delete",
            "required": true,
            "type": "string"
          }
        ]
      }
    },
    "/patient": {
      "get": {
        "tags": [
          "Patient"
        ],
        "summary": "List all patients",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Patient"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Patient"
        ],
        "summary": "Create a new patient",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Patient object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PatientInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Patient"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/patients/{id}": {
      "get": {
        "tags": [
          "Patient"
        ],
        "summary": "Get a patient by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the patient to get",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Patient"
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "tags": [
          "Patient"
        ],
        "summary": "Update a patient",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the patient to update",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Patient object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PatientInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Patient"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }  
        }
      },
      "delete": {
        "summary": "Delete client by ID",
        "tags": [
          "Patient"
        ],
        "description": "Deletes a patient object by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the patient to delete",
            "required": true,
            "type": "string"
          }
        ]
      }
    },  
    "/requisition": {
        "get": {
          "tags": [
            "Requisition"
          ],
          "summary": "Get all requisitions",
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Returns a list of all requisitions",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Requisition"
                }
              }
            },
            "500": {
              "description": "Internal server error"
            }
          }
        },
        "post": {
          "tags": [
            "Requisition"
          ],
          "summary": "Create a new requisition",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "body",
              "description": "Requisition object to be created",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Requisition"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "Requisition created successfully",
              "schema": {
                "$ref": "#/definitions/Requisition"
              }
            },
            "400": {
              "description": "Invalid request"
            },
            "500": {
              "description": "Internal server error"
            }
          }
        }
    },
      "/requisition/{id}": {
        "get": {
          "tags": [
            "Requisition"
          ],
          "summary": "Get a requisition by ID",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "description": "ID of the requisition to be retrieved",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Returns the requisition with the specified ID",
              "schema": {
                "$ref": "#/definitions/Requisition"
              }
            },
            "404": {
              "description": "Requisition not found"
            },
            "500": {
              "description": "Internal server error"
            }
          }
        },
        "put": {
          "tags": [
            "Requisition"
          ],
          "summary": "Update an existing requisition",
          "description": "Updates an existing requisition with the provided ID.",
          "operationId": "updateRequisition",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "body",
              "in": "body",
              "description": "Requisition object to update",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Requisition"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful update",
              "schema": {
                "$ref": "#/definitions/Requisition"
              }
            },
            "400": {
              "description": "Bad Request"
            },
            "404": {
              "description": "Requisition not found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          }
        },
        "delete": {
          "tags": [
            "Requisition"
          ],
          "summary": "Delete an existing requisition",
          "description": "Deletes an existing requisition with the provided ID.",
          "operationId": "deleteRequisition",
          "produces": [
            "application/json"
          ],
          "responses": {
            "204": {
              "description": "Successful deletion"
            },
            "404": {
              "description": "Requisition not found"
            },
            "500": {
              "description": "Internal Server Error"
            }
          }
        },
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the requisition"
          },
          "status": {
            "type": "string",
            "description": "Status of the requisition"
          },
          "patient_id": {
            "type": "string",
            "description": "ID of the patient associated with the requisition"
          },
          "collection_date": {
            "type": "string",
            "description": "Date when the sample was collected"
          },
          "received_date": {
            "type": "string",
            "description": "Date when the sample was received by the lab"
          }
        }
    }
  } 
}         



  
